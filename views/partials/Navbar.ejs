<nav class="navbar" role="navigation" aria-label="main navigation" style="background: rgb(35, 35, 35);">
    <style>
        /*the container must be positioned relative:*/
        .autocomplete {
            position: relative;
            display: inline-block;
        }

        .autocomplete-items {
            position: absolute;
            border: 2px solid rgb(70, 70, 70);
            border-bottom: none;
            border-top: none;
            z-index: 99;
            /*position the autocomplete items to be the same width as the container:*/
            top: 100%;
            left: 0;
            right: 0;
            color: #fff;
            font-family: 'Outfit', sans-serif;
        }

        .autocomplete-items div {
            padding: 10px;
            cursor: pointer;
            background-color: #181818;
            border-bottom: 1px solid rgb(70, 70, 70);
            color: #fff;
            font-family: 'Outfit', sans-serif;
        }

        .autocomplete-items strong {
            color: #fff;
            font-family: 'Outfit', sans-serif;
        }

        /*when hovering an item:*/
        .autocomplete-items div:hover {
            background-color: #393939;
        }

        /*when navigating through the items using the arrow keys:*/
        .autocomplete-active {
            background-color: DodgerBlue !important;
            color: #ffffff;
        }
    </style>
    <div class="container">
        <div class="navbar-brand">
            <a class="navbar-item" href="/">
                <strong style="font-weight: 700; color: white;">PvPBeach Network</strong>
            </a>

            <a role="button" class="navbar-burger burger" aria-label="menu" aria-expanded="false" data-target="navbarBasicExample">
                <span aria-hidden="true"></span>
                <span aria-hidden="true"></span>
                <span aria-hidden="true"></span>
            </a>
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', () => {

// Get all "navbar-burger" elements
const $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0);

// Check if there are any navbar burgers
if ($navbarBurgers.length > 0) {

  // Add a click event on each of them
  $navbarBurgers.forEach( el => {
    el.addEventListener('click', () => {

      // Get the target from the "data-target" attribute
      const target = el.dataset.target;
      const $target = document.getElementById(target);
      const buttons = document.getElementById('nav-buttons');

      // Toggle the "is-active" class on both the "navbar-burger" and the "navbar-menu"
      el.classList.toggle('is-active');
      $target.classList.toggle('is-active');

      $target.style.backgroundColor = "rgb(35, 35, 35)";

      buttons.style.paddingTop = "10px";

    });
  });
}

});
        </script>

        <div id="navbarBasicExample" class="navbar-menu">
            <div class="navbar-start">
                <a class="navbar-item" href="/support">
                    <span>
                        <i style="font-size: 10pt;" class="material-icons">support</i>
                    </span>
                    <span style="padding-left: 4px;">Support</span>
                </a>

                <a class="navbar-item" href="https://store.pvpbeach.com">
                    <span>
                        <i style="font-size: 10pt;" class="material-icons">shopping_cart</i>
                    </span>
                    <span style="padding-left: 4px;">Store</span>
                </a>

                <a class="navbar-item" href="/staff">
                    <span>
                        <i style="font-size: 10pt;" class="material-icons">people_alt</i>
                    </span>
                    <span style="padding-left: 4px;">Staff</span>
                </a>


                <% if (req.isAuthenticated() && (req.user.rank !== 'Default' || req.user.rank !== 'silver' || req.user.rank !== 'gold' || req.user.rank !== 'platnium')) { %>
                    <a class="navbar-item" href="/panel">
                        <span>
                            <i style="font-size: 10pt;" class="material-icons">build</i>
                        </span>
                        <span style="padding-left: 4px;">Panel</span>
                    </a>
                <% } %>
            </div>

            <div class="navbar-end">
                <div class="navbar-item">
                    <p class="control has-icons-left" style="padding-right: 10px;">
                        <input id="search" style="font-family: Outfit, sans-serif;" class="input is-small is-rounded" type="text" placeholder="search...">
                        <span class="icon is-small is-left">
                            <i class="fas fa-search"></i>
                        </span>
                    </p>
                    <div class="buttons" id="nav-buttons">
                        <% if (!req.isAuthenticated()) { %>
                        <a href="/auth/register" class="button is-primary is-small is-rounded">
                            <strong>Sign up</strong>
                        </a>
                        <a href="/auth/login" class="button is-light is-small is-rounded">
                            Log in
                        </a>
                        <% } else { %>
                        <a href="/profile/<%= req.user.username %>">
                            <img style="border-radius: 5px;" src="https://crafatar.com/avatars/<%= req.user.uuid %>?overlay=true" alt="aa">
                        </a>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>
</nav>
<script>
function autocomplete(inp, arr) {
        var currentFocus;
        inp.addEventListener("input", function(e) {
            var a, b, i, val = this.value;
            closeAllLists();
            if (!val) { return false;}
            currentFocus = -1;
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            this.parentNode.appendChild(a);
            for (i = 0; i < arr.length; i++) {
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    b = document.createElement("DIV");
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    b.addEventListener("click", function(e) {
                        inp.value = this.getElementsByTagName("input")[0].value;
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        inp.addEventListener("keydown", function(e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode === 40) {
                currentFocus++;
                addActive(x);
            } else if (e.keyCode === 38) {
                currentFocus--;
                addActive(x);
            } else if (e.keyCode === 13) {
                if (currentFocus > -1) if (x) x[currentFocus].click();
            }
        });
        function addActive(x) {
            if (!x) return false;
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }
    let array = [];
    fetch("/api/v1/autocomplete").then(res => res.json()).then(async res => {
        array = res.usernames;
        autocomplete(document.getElementById("search"), array);
        let bruh = document.getElementById('search');
         bruh.addEventListener('keypress', async event => {
        if (event.key === "Enter" && bruh.value !== "" && array.includes(bruh.value)) {
            window.location.href = `/profile/${bruh.value}`;
        }
      });
    });

</script>

